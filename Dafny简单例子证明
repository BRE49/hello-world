//Question 4: Factorial 阶乘的证明

method ComputeFact(n : nat) returns (res : nat)
  requires n > 0;
  ensures res == fact(n);
 {
  res := 1;
  var i := 2;
  while (i <= n) 
  {
    res := res * i;
    i := i + 1;
  }
 }
 
 /*The variables are natural numbers. You are supposed to prove that the program is correct with respect to a recursive definition
  of the factorial function, defined mathematically as:证明函数在阶乘函数递归定义上的正确性
  
  fact(1) = 1
  fact(m) = m * fact(m - 1)
 
 1.Complete the specification so that Dafny is able to prove ComputeFact correct.
    method ComputeFact(n : nat) returns (res : nat)
      requires n > 0;
      ensures res == fact(n);
     {
      res := 1;
      var i := 2;
      while (i <= n)
        invariant 2 <= i <= n + 1;
        invariant res == fact(i - 1);
        decreases(n - i);
      {
        res := res * i;
        i := i + 1;
      }
     }

     function fact(n : int) : int
     requires 0 <= n;
     {
         if n == 0 then 1 else n * fact(n - 1)
    }

 2.Prove correctness of the loop using the checklist for proving loops correct from the lecture notes. See also Chapter 11 of [Gries].
    ** Specification

      Q ==> wp(S1; S2, wp(while B I D SS1; SS2, R))

      wp(while B I D S, R)

      Q: n > 0
      R: res == fact(n)

      B: i <= n
      I: 2 <= i <= n + 1 && res == fact(i - 1)
      D: n - i

      S1: res := 1
      S2: i := 2

      SS1: res := res * i
      SS2: i := i + 1



    ** Formula from pdf

      wp(while B I D S, R) =
        I
        && (B && I ==> wp(S, I))
        && (!B && I ==> R)

        && (I ==> D >= 0)
        && (B && I ==>
          wp(tmp := D ; S, tmp > D))



    ** Substitute with actual values

      wp(while i <= n 2 <= i <= n + 1 && res == fact(i - 1) n - i res := res * i; i := i + 1, res == fact(n)) =
        2 <= i <= n + 1 && res == fact(i - 1)
        && (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> wp(res := res * i; i := i + 1, 2 <= i <= n + 1 && res == fact(i - 1)))
        && (!i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> res == fact(n))

        && (2 <= i <= n + 1 && res == fact(i - 1) ==> n - i >= 0)
        && (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==>
          wp(tmp := n - i ; res := res * i; i := i + 1, tmp > n - i))



    ** Prove invariant preservation during loop

    * Apply Sequential Rule once

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> wp(res := res * i; i := i + 1, 2 <= i <= n + 1 && res == fact(i - 1)))

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> wp(res := res * i, wp(i := i + 1, 2 <= i <= n + 1 && res == fact(i - 1))))



    * Apply Assignment Rule twice

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> wp(res := res * i, wp(i := i + 1, 2 <= i <= n + 1 && res == fact(i - 1))))

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> wp(res := res * i, 2 <= i + 1 <= n + 1 && res == fact(i + 1 - 1)))

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> 2 <= i + 1 <= n + 1 && res * i == fact(i + 1 - 1))



    * Simplify

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> 2 <= i + 1 <= n + 1 && res * i == fact(i))

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> 2 <= i + 1 <= n + 1 && fact(i - 1) * i == fact(i))

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> 2 <= i + 1 <= n + 1 && true // Trivially true

      (i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> 2 <= i + 1 <= n + 1

      (          2 <= i <= n     && res == fact(i - 1) ==> 2 <= i + 1 <= n + 1 // Combine statements

      (          2 <= i <= n     && res == fact(i - 1) ==> 2 <= i + 1 <= n + 1

      (          2 <= i <= n     && res == fact(i - 1) ==> 1 <= i <= n


    * Proof

      Since LHS is a stronger statement than RHS, if LHS is true --> RHS is true.

      If LHS is false, the implication is per definition true.





    ** Prove invariant after loop

      !B && I ==> R

    * Substitute with actual values

      !B && I ==> R

      !(i <= n) && 2 <= i <= n + 1 && res == fact(i - 1) ==> res == fact(n)

    * Simplify

      !(i <= n) && 2 <= i <= n + 1 && res == fact(i - 1) ==> res == fact(n) -->

      (i > n)   && 2 <= i <= n + 1 && res == fact(i - 1) ==> res == fact(n)

      (i > n)   && 2 <= i <= n + 1 && res == fact(i - 1) ==> fact(i - 1) == fact(n)

    * Proof

      The conditions for LHS to evaluate true guarantees that RHS evalutes true

      This is because the condition for RHS to evaluate false is n != i + 1.

      If RHS evaluates false, either of the first two expressions in LHS will evaluate false
      (depending on a difference of 1 or a difference of >1), resulting in a true implication.





    ** Prove variant bounded below zero

      I ==> D >= 0

      I: 2 <= i <= n + 1 && res == fact(i - 1)

      Relevant part: 2 <= i <= n + 1

      i <= (n + 1) ==> (n - i) >= 0
      i - 1 <= n ==> n >= i

    * Proof

      Case 1 that would evaluate the expression false: n = 0, i = 1
      However, the invariant protects against i < 2, so this cannot occur.

      Case 2 that would evaluate the expression false: n = 1, i = 2
      However, the invariant ensures that the n parameter becomes n + 1 when evaluated, resulting in n = 2, i = 2, which evaluates to true.

      This proves that the variant is bounded below zero.





    ** Prove decrease expression

      B && I ==> wp(tmp := D ; S, tmp > D)

    * Apply Sequential Rule twice

      wp(tmp := D ; SS1 ; SS2, tmp > D) --> wp(tmp := D, wp(SS1, wp(SS2, tmp > D)))

    * Substitute with actual values

      wp(tmp := D, wp(SS1, wp(SS2, tmp > D))) -->  wp(tmp := n - i, wp(res := res * i, wp(i := i + 1, tmp > n - i)))

    * Apply Assignment Rule once

      wp(tmp := n - i, wp(res := res * i, wp(i := i + 1, tmp > n - i))) --> wp(tmp := n - i, wp(res := res * i, tmp > n - (i + 1)))

                                                                        --> wp(tmp := n - i, wp(res := res * i, tmp > n - i - 1))

                                                                        --> wp(tmp := n - i, tmp > n - i - 1)

                                                                        --> n - i > n - i - 1

    * Recap

      B && I ==> wp(tmp := D ; S, tmp > D)

      B && I ==> n - i > n - i - 1

    * Substitute with actual values

      B && I ==> n - i > n - i - 1 -->

      i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> n - i > n - i - 1

    * Proof

      i <= n && 2 <= i <= n + 1 && res == fact(i - 1) ==> n - i > n - i - 1

      true   && true            && res == fact(2 - 1) ==> n > n - 1

      true   && true            && true/false         ==> true

      true/false                                      ==> true

      true

      This proves the decrementation D.




    ** Prove invariant holds before loop

      Q ==> wp(S1; S2, I)

    * Apply Sequential Rule once

      wp(S1; S2, I) --> wp(S1, wp(S2, I))

    * Substitute with actual values

      wp(S1, wp(S2, I)) --> wp(res := 1, wp(i := 2, 2 <= i <= n + 1 && res == fact(i - 1)))

    * Apply Assignment Rule twice

      wp(res := 1, wp(i := 2, 2 <= i   <= n + 1 && res == fact(i   - 1))) -->

      wp(res := 1,            2 <= (2) <= n + 1 && res == fact((2) - 1))  -->

      wp(res := 1,            2 <= 2   <= n + 1 && res == fact(2   - 1))  -->

                              2 <= 2   <= n + 1 && (1) == fact(2   - 1)   -->

                              2 <= 2   <= n + 1 && 1   == fact(2   - 1)   -->

    * Simplify

      2 <= 2 <= n + 1 && 1 == fact(2 - 1) -->

           2 <= n + 1 && 1 == fact(2 - 1) -->

           2 <= n + 1 && true             -->

           2 <= n + 1                     -->

           2 - 1 <= n                     -->

           1 <= n                         -->

           n >= 1                         -->

    * Recap

      Q ==> n >= 1 --> n > 0 ==> n >= 1

      Trivially true, proving that the invariant holds before loop.





    ** Conclusion

    Since all 5 loop conditions for correct loop are proven true, there's no need
    to change any preconditions since the loop is in itself proven to be true. QED.

    */


*/




//Question 1:计算输入数值的绝对值

method Abs(x : int) returns (y : int)
  // return value doesn't deviate from intended value
  ensures 0 <= x ==> y == x;
  ensures x < 0 ==> y == -x;
   // return value is greater or equal to zero
  ensures 0 <= y;
{
  if (x < 0)
   { y := -x; }
  else
   { y := x; }
}

/*
1: 我们没有任何先决条件，因为后置条件涵盖了x的每个可能值，所以我们不需要任何先决条件。

2:    	
	
    Q ==> wp(S,R) ->
    None ==> wp( if(x < 0) then {y := -x} else {y := x }, (0 <= x ==> y == x) && (x < 0 ==> y == -x) && (0 <= y)) ->
                Conditional rule and assignment rule

    Conditional rule:
    ((x < 0) -> wp({y := -x}, (0 <= x ==> y == x) && (x < 0 ==> y == -x) && (0 <= y))) &&
    ((0 <= x) -> wp({y := x}, (0 <= x ==> y == x) && (x < 0 ==> y == -x) && (0 <= y)))

     -> ((x < 0) -> wp({y := -x}, (x < 0 ==> y == -x) && (0 <= y))) &&
    	((0 <= x) -> wp({y := x}, (0 <= x ==> y == x) && (0 <= y)))
	
    Assignment rule:
    (x <  0) ==> -x >= 0 && -x := -x && 
    (0 <= x) ==> 0 <= x && x := x) 
	
	= true && true = true
	

3:由于abs方法的目的是它应该计算并返回插入数字的绝对值，因此我们不需要改变in-parameter（写入参数）或修改任何值。 因此，函数更合适，因为它们是“纯方法”的实现。
*/

// Question 2：

method Q2(x : int, y : int) returns (big : int, small : int)
  ensures big > small;
{
  if (x > y)
   {big, small := x, y;}
  else
   {big, small := y, x;}
}

/*
后置条件无法保持正确因为你不能确保big是大于small。如果x = y， big就不是较大值了
Q: None
R: big > small
S: if (x > y) then {big, small := x, y;} else {big, small := y, x;}

Q ==> wp(S,R) ->
    Q ==> wp (S,R) ->
    None ==> wp( if (x > y) then {big, small := x, y;} else {big, small := y, x;} , big > small)
            conditional rule and assignment rule.

    conditional rule:
    ((x > y) -> wp({big, small := x, y;},(big > small))) &&
    ((x <= y) -> wp({big, small := y, x;},(big > small)))

    Assignment rule:
    (x > y ==> x > y) && (x <= y ==> x < y)
   
    = true && false = false

    This shows that if the inputs are equal the program will fail.这表明输入参数相等的话程序失败。

解决方法：
1:
    Add a requires as seen below.

    method Q2(x : int, y : int) returns (big : int, small : int)
      requires x != y;
      ensures big > small;
    {
      if (x > y)
       {big, small := x, y;}
      else
       {big, small := y, x;}
    }

2:
    Change ensure to be as below.

    method Q2(x : int, y : int) returns (big : int, small : int)
      ensures big >= small;
    {
      if (x > y)
       {big, small := x, y;}
      else
       {big, small := y, x;}
    }

3:
    It is possible by adding an else wich assigns dummy values if x and y are equal however that would defeat the
    purpose of the program.

    Example:
    method Q2(x : int, y : int) returns (big : int, small : int)
          ensures big >= small;
        {
          if (x > y)
           {big, small := x, y;}
          else if (x < y)
           {big, small := y, x;}
          else
           {big, small := 1, 0}
        }

*/

//Question 3: Correct program AND missing specs!
/*
method Q3(n0 : int, m0 : int) returns (res : int)
  
{
  var n, m : int;
  res := 0;
  if (n0 >= 0) 
       {n,m := n0, m0;} 
  else 
       {n,m := -n0, -m0;}
  while (0 < n) 
  { 
    res := res + m; 
    n := n - 1; 
  }
}

Why can't we use the inputs directly? (n0, m0)

Because we are not using "modified-clause"

What IS the purpose of method? In other words, what should the specification (postcondition(s)) of the program be?

The purpose is multiplication between two int-values. That it ensures that result of the method is the two inputs multiplied
to each other. With the following input values the method behaved as a multiplying function:
   n,m
   0,0  res = 0
   1,1	res = 1
  -1,1 	res = -1
  1,-1 	res = -1
 -1,-1	res = 1
 
Prove by hand that the program is correct with respect to your specification. Follow the steps in the "checklist" for proving loops correct from the lecture notes. See also Chapter 11 of [Gries].





method Q3(n0 : int, m0 : int) returns (res : int)
ensures res == n0*m0;
{
  var n, m : int;
  res := 0;
  if (n0 >= 0) 
       {n,m := n0, m0;} 
  else 
       {n, m:= -n0, -m0;}
       
  while (0 < n) 
  invariant m0*n0 = res + m*n;  
  invariant n >= 0;
  decreases n;
  { 
    res := res + m; 
    n := n - 1; 
  }
}



/*
Verification
--------------------------------------------------------------------------------------
method Q3(n0 : int, m0 : int) returns (res : int)
Q 
{
  var n, m : int;
  S1
  while (0 < n) 
  I
  decreases n;
  { S2 }
}


ensures R: res == n0*m0
statement S1: res:= 0; if (n0 >=0) then (n,m := n0,m0) else (n,m := -n0,-m0)
statement S2: res= res + m, n := n - 1; 
invariant I: m0*n0 = res + m*n
While guard B: 0 < n
Q = {}


Q -> wp(S1;S2,R) 
Sequential Rule:

wp(S1,wp(S2,R))

While-loop, 
-------------------------------------------------------
wp(while B I D S, R)

I
&& (B && I ==> wp(S,I))
&& (!B && I ==> R)
=
m0*n0 = res + m*n
&& ( 0 < n && m0*n0 = res + m*n ==> wp (S,I))
&& (0 >=n && m0*n0 = res + m*n ==> res == n0*m0)

wp(S2,I) =wp(res= res + m; n := n - 1,  m0*n0 = res + m*n)

		Assignment rule
   		wp(res= res + m, wp(n := n - 1,  m0*n0 = res + m*n))
		-> wp(res= res + m, m0*n0 = res + m*(n - 1)) == m0*n0 = res + m + m*(n - 1)
		-> wp(m0*n0 = res + m + m*n - m) == m0*n0 = res + m*n 

1. m0*n0 = res + m*n
2. && ( 0 < n && m0*n0 = res + m*n ==> m0*n0 = res + m*n
3. && (0 >=n && m0*n0 = res + m*n ==> res == n0*m0)

1 & 2 True if invariant is true
3. if 0 >=n is true, (0 >=n && (m0*n0 = res + m*n ==> res == n0*m0))
   -> (m0*n0 = res + m*n ==> res == n0*m0) = m*n = 0
   -> (0 >=n && m*n = 0)

wp(S2,R) = m0*n0 = res + m*n && ( 0 >= n ==> m*n = 0)

----------------------------------------------------------

Full program with S2 solved
----------------------------------------------------------
wp(S1,wp(S2,R))
=
wp(S1,m0*n0 = res + m*n && ( 0 >= n ==> m*n = 0))

Conditional Rule:
	wp(res:= 0, (n0 > 0) ==>  wp(n,m :=  n0, m0, m0*n0 = res + m*n && ( 0 >= n ==> m*n = 0)) &&
		    (n0 <= 0 ==>  wp(n,m := -n0,-m0, m0*n0 = res + m*n && ( 0 >= n ==> m*n = 0))
Assignment Rule:
	wp((n0 > 0) ==>  wp(n,m :=  n0, m0, m0*n0 = 0 + m*n && ( 0 >= n ==> m*n = 0)) &&
	   (n0 <= 0 ==>  wp(n,m := -n0,-m0, m0*n0 = 0 + m*n && ( 0 >= n ==> m*n = 0))
     -> Simplify if
	  wp((n0 > 0) ==>  wp(m0*n0 = 0 + m0*n0 && ( 0 >= n0 ==> m0*n0 = 0)
     ->   wp((n0 >= 0) ==>  wp( 0 >= n0 ==> m0*n0 = 0)
     -> Simplify else
	  wp((n0 <= 0) ==>  wp(m0*n0 = 0 + -m0*-n0 && ( 0 >= -n0 ==> -m0*-n0 = 0))
     ->   wp((n0 <= 0) ==>  wp( 0 >= -n0 ==> -m0*-n0 = 0))

         wp((n0 >= 0) ==> ( 0 >= n0 ==> m0*n0 = 0) && 
         (n0 <= 0) ==> ( 0 >= -n0 ==> -m0*-n0 = 0))

     ->  wp((n0 == 0) ==> m0*n0 = 0) && 
         (n0 == 0) ==> -m0*-n0 = 0))

     ->  wp((true) && (true))


Decreasing proof (I ==> D >=0)
----------------------------------------------------------
I && B -> n>=0

Simplify
I && 0 < n -> n >=0
-> I && (0 < n) -> 0 < n

Trivial True!

N decreasing proof (B && I ==> wp (tmp := D; S, D < tmp))
----------------------------------------------------------

B && I ==> wp (tmp := n; res:= res + m; n:=n-1, n < tmp)

Sequential:
B && I ==> wp (tmp := n, wp(res:= res + m,wp(n:=n-1, n < tmp)))

Assignment:
wp(tmp := n, wp(res:= res + m,wp(n:=n-1, n < tmp)))
-> wp(tmp := n, wp(res:= res + m, n-1 < tmp)))
-> wp(tmp := n, n-1 < tmp))
-> wp(n-1 < n)
B && I ==> n-1 < n

Trivial True!
	
*/


